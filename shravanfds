                         A1

# BEGINNING OF CODE
# List to store players
cricketPlayers = []
badmintonPlayers = []
footballPlayers = []

# Input cricket
def cricketInput():
    total = int(input("Total number of CRICKET players:\t"))
    for i in range(total):
        players = int(input(f"Roll number of player {i+1}:\t"))
        cricketPlayers.append(players)
    print(f"\n----------\nStudents playing cricket:\t {cricketPlayers}\n----------\n")

# Input badminton
def badmintonInput():
    total = int(input("Total number of BADMINTON players:\t"))
    for i in range(total):
        players = int(input(f"Roll number of player {i+1}:\t"))
        badmintonPlayers.append(players)
    print(f"\n----------\nStudents playing badminton:\t {badmintonPlayers}\n----------\n")

# Input football
def footballInput():
    total = int(input("Total number of FOOTBALL players:\t"))
    for i in range(total):
        players = int(input(f"Roll number of player {i+1}:\t"))
        footballPlayers.append(players)
    print(f"\n----------\nStudents playing football:\t {footballPlayers}\n----------\n")

# Playing both cricket and badminton
def CricketAndBadminton():
    listCricketAndBadminton = []
    for i in cricketPlayers:
        if i in badmintonPlayers:
            listCricketAndBadminton.append(i)
    print(f"\n----------\nStudents playing cricket and badminton:\t {listCricketAndBadminton}\n----------\n")

# Either cricket or badminton but not both
def CricketOrBadminton():
    listCricketOrBadminton = []
    for i in cricketPlayers:
        if i not in badmintonPlayers:
            listCricketOrBadminton.append(i)
    for i in badmintonPlayers:
        if i not in cricketPlayers:
            listCricketOrBadminton.append(i)
    print(f"\n----------\nStudents playing cricket or badminton (but not both):\t {listCricketOrBadminton}\n----------\n")

# Neither cricket nor badminton, i.e. football only
def FootballOnly():
    listCricketAndBadminton = []
    listFootballOnly = []
    for i in cricketPlayers:
        listCricketAndBadminton.append(i)
    for i in badmintonPlayers:
        if i not in cricketPlayers:
            listCricketAndBadminton.append(i)
    for i in footballPlayers:
        if i not in listCricketAndBadminton:
            listFootballOnly.append(i)
    print(f"\n----------\nTotal students playing football only are:\t{len(listFootballOnly)}\nList:\t{listFootballOnly}\n----------\n")

# Cricket and football but not badminton
def notBadminton():
    listNotBadminton = []
    for i in cricketPlayers:
        if i in footballPlayers:
            if i not in badmintonPlayers:
                listNotBadminton.append(i)
    print(f"\n----------\nTotal students not playing badminton (but do play cricket and football):\t{len(listNotBadminton)}\nList:\t{listNotBadminton}\n----------\n")

# Main function with options
def main():    
    print("----- ENTER ROLL NUMBERS IN LIST -----")
    cricketInput()
    badmintonInput()
    footballInput()
    print("----- ROLL NUMBERS SAVED -----\n")
    while (1):
        print("\n----- MAIN MENU -----")
        print("1 -> Students playing both cricket and badminton")
        print("2 -> Students playing either cricket or badminton, but not both")
        print("3 -> Students playing neither cricket nor badminton (i.e. football only)")
        print("4 -> Students playing cricket and football, but not badminton")
        print("5 -> Exit")
        
        optn = int(input("Choose an option (1-5):\t"))
        
        if (optn == 1):
            CricketAndBadminton()
        elif (optn == 2):
            CricketOrBadminton()
        elif (optn == 3):
            FootballOnly()
        elif (optn == 4):
            notBadminton()
        elif (optn ==5):
            print("\n\n## END OF CODE\n\n")
            quit()
        else:
            print("\n\nPlease choose a valid option (1-5)\n\n")

main()
# END OF CODE




















              A2  


# BEGINNING OF CODE
# List for storing marks
marks = []
total = int(input("Total number of students are:\t"))

# Input marks
def marksInput():
    print("\n----------\nNOTE: PLEASE ENTER MARKS OUT OF 50. ENTER '-1' FOR ABSENT STUDENTS.\n----------\n")
    for i in range(total):
        enterMarks = int(input(f"Enter marks for student {i+1}:\t"))
        marks.append(enterMarks)
    print(f"\n-----\nMarks of {total} students are:\t{marks}\n-----")

# Option 1 = Average score
def average_marks():
    marks_withoutAbsent = []
    for i in marks:
        if (i >= 0):
            marks_withoutAbsent.append(i)
        else:
            continue
    average_calc = sum(marks_withoutAbsent) / total
    print(f"\n------\nAverage score of {total} students is:\t{average_calc}\n-----")

# Option 2 = High and low marks
def high_low():
    maxi = marks[0] # Initialise maxi with the first element of the marks list
    mini = marks[0] # Initialise mini with the first element of the marks list
    for i in range(len(marks)):
        if (maxi < marks[i] and marks[i] > -1):
            maxi = marks[i]
    for j in range(len(marks)):
        if (mini > marks[j] and marks[j] > -1):
            mini = marks[j]
    print(f"\n-----\nHighest score is:\t{maxi}\nLowest score is:\t{mini}\n-----")

# Option 3 = Absent count
def absent():
    absent_count = 0;
    for i in marks:
        if (i < 0):
            absent_count+=1
        else:
            continue
    print(f"\n-----\nTotal absent students are:\t{absent_count}\n-----")

# Option 4 = Highest frequency
def high_freq():
    freq_count = 0 # Initialise frequency counter
    for i in range(len(marks)): # Iterate through marks list using i
        if (marks[i] >= 0): # Only consider non-negative marks (since -1 is absent)
            temp_count = 0 # Initialise temporary counter
            for j in range(len(marks)): # Iterate through marks list using j again
                if (marks[i] == marks[j]):
                    temp_count+=1
            if (freq_count < temp_count): # If temp_count is greater than freq_count value, then
                freq_count = temp_count # Make freq_count equal to temp_count
    print(f"\n-----\nHighest frequency is:\t{freq_count}\n-----")

def main():
    marksInput()
    
    while (1):
        print("\n----- MAIN MENU -----")
        print("1 -> Average score of class")
        print("2 -> Highest and lowest score of class")
        print("3 -> Total absent students")
        print("4 -> Marks with highest frequency")
        print("5 -> Exit")
        
        optn = int(input("Choose an option (1-5):\t"))
        
        if (optn == 1):
            average_marks()
        elif (optn == 2):
            high_low()
        elif (optn == 3):
            absent()
        elif (optn == 4):
            high_freq()
        elif (optn == 5):
            print("\n\n## END OF CODE\n\n")
            quit()
        else:
            print("\n\nPlease choose a valid option (1-5)\n\n")
main()
# END OF CODE














          A5


str1 = input("Enter string: ")
substr1 = input("Enter substring: ")
occur1 = input("Enter character whose occurence is to be calculated: ")
occur2 = str1.split()
index1 = []
for i in occur2:
    for j in occur2:
        if(i == j and j not in index1):
            index1.append(i)
        else:
            continue

def longestWord():
    globalMax = 0
    currentMax = 0
    list1 = []
    for i in str1:
        if (i != " "):
            currentMax = currentMax + 1
            list1.append(i)
        else:
            if (currentMax > globalMax):
                globalMax = currentMax
                temp = list1
            currentMax = 0
            list1 = []
        if (i == str1[len(str1) - 1]):
            if (currentMax > globalMax):
                globalMax = currentMax
                temp = list1
    print("Longest word is: ", "".join(temp))
    print("Length of largest word is: ", globalMax)


def palindrome():
    rev1 = str1
    if (str1[::-1] == rev1):
        print("String is palindrome")
    else:
        print("String is not palindrome")


def charfrequency():
    temp = 0
    for i in str1:
        max1 = 0
        for j in range(0, len(str1)):
            if (str1[j] != " " and str1[j] == occur1):
                max1 = max1 + 1
            else:
                continue
        if (max1 > temp):
            temp = max1
        else:
            continue
    print("Number of times the character '", occur1, "' occurs: ", temp)


def indexSubstring():
    for i in range(len(str1) - len(substr1) + 1):
        if str1[i:i + len(substr1)] == substr1:
            print("Substring present in string at index: ", i)
            break
    else:
        print('Substring not present')

def occurWord():
    for i in index1:
        max1 = 0
        for j in occur2:
            if(i == j):
                max1 = max1 + 1
            else:
                continue
        print("The number of times '",i,"' is repeated is: ",max1)

flag = 1
while flag == 1:
    print("1. Display word with longest word: \n")
    print("2. The occurence of '",occur1,"' in the string is: \n")
    print("3. Check whether is string is palindrome or not: \n")
    print("4. Display index of first appearance of the substring: \n")
    print("5. Occurrence of each word in the given string: \n")
    print("6. Exit")
    ch = int(input("Enter your choice: "))
    if(ch == 1):
        longestWord()
    elif(ch == 2):
        charfrequency()
    elif(ch == 3):
        palindrome()
    elif(ch == 4):
        indexSubstring()
    elif(ch == 5):
        occurWord()
    elif(ch>6 or ch<1):
        print("Enter valid choice")
    elif(ch == 6):
        flag = 0








     B11



        # List to store roll numbers of students that attended the program
programRoll=[]
attendees=int(input("Enter the number of students attending the program:\t"))

# Function to take input for roll numbers in list
def attendInput():
	for i in range(attendees):
		roll=int(input(f"Enter roll number for student {i+1}:\t"))
		programRoll.append(roll)
	print(f"Roll numbers of {attendees} students that attended the program are:\t {programRoll}")

# Linear search
def linearSearch(roll_list, roll_search):
	for i in roll_list:
		if i==roll_search:
		    return 1

# Sentinel search
def sentinelSearch(roll_list, roll_search, n):
    end=roll_list[n-1]
    roll_list[n-1]=roll_search
    i=0
    while (roll_list[i] != roll_search):
        i+=1
    roll_list[n-1]=end
    if ((i<n-1) or (roll_search==roll_list[n-1])):
        return 1
    else:
        return -1

def binarySearch(arr, target):
    arr.sort()
    # Binary search on the sorted list
    low, high = 0, len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        mid_element = arr[mid]

        if mid_element == target:
            return mid  # Target element found, return its index
        elif mid_element < target:
            low = mid + 1  # Target is in the right half
        else:
            high = mid - 1  # Target is in the left half

    return -1  # Target element not found in the list

'''
# DOESN'T WORK THIS ONE
# Binary search
def binarySearch(roll_list, roll_search, begin, n):
    if begin>n:
        return -1
    mid=(begin+n)//2
    if roll_search==roll_list[mid]:
        return mid
    if roll_search<roll_list[mid]:
        return binarySearch(roll_list, roll_search, begin, mid-1)
    else:
        return binarySearch(roll_list,roll_search,mid+1,n)
'''

# Fibonacci search
def fibonacciSearch(students_attend, search_element, n):
    students_attend.sort()
    fibMMm2 = 0
    fibMMm1 = 1
    fibM = fibMMm2 + fibMMm1
    while (fibM<n):
        fibMMm2=fibMMm1
        fibMMm1=fibM
        fibM=fibMMm2+fibMMm1
    offset=-1;
    while (fibM>1):
        i=min(offset+fibMMm2, n-1)
        if (students_attend[i]<search_element):
            fibM=fibMMm1
            fibMMm1=fibMMm2
            fibMMm2=fibM-fibMMm1
            offset=i
        elif (students_attend[i]>search_element):
            fibM=fibMMm2
            fibMMm1=fibMMm1-fibMMm2
            fibMMm2=fibM-fibMMm1
        else:
            return i
    if(fibMMm1 and students_attend[offset+1]==search_element):
        return offset+1;
    else:
        return -1

def main():

	# Input for marks and search roll
	attendInput()
	searchAttendee=int(input("\nEnter the roll number you want to search:\t"))
	
	# Options
	while True:
		print("\n----- CHOOSE SEARCH TYPE -----")
		print("1 -> Linear search")
		print("2 -> Sentinel search")
		print("3 -> Binary search")
		print("4 -> Fibonacci search")
		print("5 -> Exit")
		optn=int(input("\nChoose an option (1-5):\t"))
		
		if (optn==1):
			result=linearSearch(programRoll, searchAttendee)
			if (result==1):
			    print(f"\nRoll number {searchAttendee} attended the program.\n")
			else:
			    print(f"\nRoll number {searchAttendee} has either not been added to the list or was absent.\n")
		elif (optn==2):
			result=sentinelSearch(programRoll, searchAttendee, attendees)
			if (result==1):
			    print(f"\nRoll number {searchAttendee} attended the program.\n")
			else:
			    print(f"\nRoll number {searchAttendee} has either not been added to the list or was absent.\n")
		elif (optn==3):
			result=binarySearch(programRoll, searchAttendee)
			if (result==-1):
			    print(f"\nRoll number {searchAttendee} has either not been added to the list or was absent.\n")
			else:
			    print(f"\nRoll number {searchAttendee} attended the program.\n")
		elif (optn==4):
			result=fibonacciSearch(programRoll, searchAttendee, attendees)
			if (result==-1):
			    print(f"\nRoll number {searchAttendee} has either not been added to the list or was absent.\n")
			else:
			    print(f"\nRoll number {searchAttendee} attended the program.\n")
		elif (optn==5):
			print("\n## END OF CODE\n\n")
			quit()
		else:
			print("\nPlease choose a valid option (1-5)\n")
			main()

# Calling main function
main()










              B14



# Sorting (Selection+Bubble) and Top 5

marks=[]

# Function to enter marks of students
def input_marks():
	students=int(input("Enter the number of students:\t"))
	for i in range(students):
		marks_in=float(input("Enter the marks (out of 50):\t"))
		marks.append(marks_in)
	print("\nThe marks you've entered for ", students, "students are: ", marks, "\n")

# Function for selection sort
def selection():
    for i in range(len(marks)):
        min_index=i
        for j in range(i+1, len(marks)):
            if marks[j] < marks[min_index]:
                min_index=j
        marks[i], marks[min_index] = marks[min_index], marks[i]
    print("Marks sorted in ascending order using selection sort:\t", marks)
	
def bubble():
    for i in range(len(marks)):
        for j in range(0, len(marks)-i-1):
            if marks[j]>marks[j+1]:
                marks[j], marks[j+1] = marks[j+1], marks[j]
    print("Marks sorted in ascending order using bubble sort:\t", marks)

def top5():
    for i in range(len(marks)):
        for j in range(0, len(marks)-i-1):
            if marks[j]<marks[j+1]:
                marks[j], marks[j+1] = marks[j+1], marks[j]
    print("Top 5 marks using bubble sorting:\t", marks[0:5])


def choose_optn():
	while True:
		print("Choose an option from the menu below:")
		print("1 -> Input marks")
		print("2 -> Selection Sorting")
		print("3 -> Bubble Sorting")
		print("4 -> Display top 5")
		print("5 -> Exit")
		optn=int(input("Choose an option (1-5):\t"))
		
		if optn==1:
			input_marks()
		elif optn==2:
			selection()
		elif optn==3:
			bubble()
		elif optn==4:
			top5()
		elif optn==5:
		    print("\n## END OF CODE\n\n")
		    quit()
		else:
			print("\nPlease choose a valid option (1-5).\n")
choose_optn()




















   B 16


# BEGINNING OF CODE
# Function for quick sort:
def quickSort(arr):
    if len(arr) <= 1: # if array is empty array
        return arr

    pivot = arr[len(arr) // 2] # Set pivot element

    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    '''
    ## ALTERNATIVE WAY OF WRITING THE UPPER 3 LINES (for easy understanding)
    left = [] # Empty list to store left part
    middle = [] # Empty list to store middle element
    right = [] # Empty list to store right part
    for i in arr:
        if (i < pivot):
            left.append(i)
        elif (i == pivot):
            middle.append(i)
        else:
            right.append(i)
    '''

    return quickSort(left) + middle + quickSort(right)

# Function for displaying top scores:
def top5(arr):
    top_scores = quickSort(arr)
    return top_scores[-1:-6:-1]

# Defining main function:
def main():
    percent = [] # List to store percentages
    
    total = int(input("Total number of students are:\t")) # Input for total students
    for i in range(total):
        percent_in = float(input(f"Enter percentage for student {i+1}:\t"))
        percent.append(percent_in)
    
    print(f"-----\nPercentages of students are:\t {percent}\n-----")
    print(f"\n-----\nSorted marks (using quick sort algorithm):\t{quickSort(percent)}\n-----")
    print(f"\n-----\nTop five scores are:\t{top5(percent)}\n-----")

# Calling main function:
main()
# END OF CODE






   C19



#include<iostream>
using namespace std;

class student
{
	int roll;
	string name;
	student *next;
	public:
		student* create();
		void display(student *head);
		student* beg_add(student *head);
		student* end_add(student *head);
		student* btwn_add(student *head);
		student* beg_del(student *head);
		student* end_del(student *head);
		student* btwn_del(student *head);
		student* total(student *head);
		student* con(student *head,student *head1);
};

student* student::create()
{
	int n;
	student *head,*p;
	head = NULL;
	cout<<"Enter number of members: ";
	cin>>n;
	for(int i = 0; i<n; i++)
	{
		if(head == NULL)
		{
			head = new student;
			cout<<"\nEnter prn of president: ";
			cin>>head->roll;
			cout<<"Enter name of president: ";
			cin>>head->name;
			head->next = NULL;
			p = head;
		}
		else
		{
			p->next = new student;
			p = p->next;
			cout<<"\nEnter prn of member: ";
			cin>>p->roll;
			cout<<"Enter name of member: ";
			cin>>p->name;
			p->next = NULL;
		}
	}
	return head;

}

void student::display(student *head)
{
	student *p;
	for(p = head; p->next!= NULL; p = p->next)
	{
		cout<<p->roll<<" "<<p->name<<"->";
	}
	cout<<p->roll<<" "<<p->name<<endl;
}

student* student::beg_add(student *head)
{
    student *p;
    p = new student;
    cout<<"\nEnter prn of new president: ";
    cin>>p->roll;
    cout<<"Enter name of new president: ";
    cin>>p->name;
    p->next = NULL;
    p->next = head;
    head = p;
    return head;
}

student* student::end_add(student *head)
{
    student *p,*q;
    p = new student;
    cout<<"\nEnter prn of secretary: ";
    cin>>p->roll;
    cout<<"Enter name of secretary: ";
    cin>>p->name;
    p->next = NULL;
    for(q = head; q->next!=NULL; q = q->next);
    q->next = p;
    return head;
}

student* student::btwn_add(student *head)
{
    int y;
    student *p,*q;
    p = new student;
    cout<<"\nEnter prn of new member: ";
    cin>>p->roll;
    cout<<"Enter name of new member: ";
    cin>>p->name;
    cout<<"Enter prn after which new member is to be added: ";
    cin>>y;
    p->next = NULL;
    q = head;
    while(q!=NULL)
    {
        if(q == NULL)
        {
            cout<<"\nInvalid Data....."<<endl;
        }
        else if(q->roll == y)
        {
            p->next = q->next;
            q->next = p;
        }
        q = q->next;
    }
    return head;
}

student* student::beg_del(student *head)
{
    student *p;
    p = head;
    head = head->next;
    delete p;
    return head;
}

student* student::end_del(student *head)
{
    student *p,*q;
    for(q = head; q->next->next!=NULL; q = q->next);
    p = q->next;
    delete p;
    q->next = NULL;
}

student* student::btwn_del(student *head)
{
    int y;
    student *p,*q;
    cout<<"\nEnter prn of member which is to be deleted: ";
    cin>>y;
    if(head == NULL)
    {
        cout<<"\nLinked list is empty!!";
        return head;
    }
    p = head;
    while(p->next!=NULL)
    {
        if(p->next->roll==y)
        {
            q = p->next;
            p->next = p->next->next;
            delete q;
        }
        p = p->next;
    }
    return head;
}

student* student::total(student *head)
{
    student *p;
    int total = 0;
    for(p = head; p!=NULL; p = p->next)
    {
        total++;
    }
    cout<<"\nTotal Number of students are: "<<total<<endl;
}

student* student::con(student *head,student *head1)
{
    student *p;
    for(p = head; p->next!=NULL; p = p->next);
    p->next = head1;
    return head;
}

int main()
{
	int flag = 1;
	int flag1 = 1;
	int flag2 = 1;
	int char0,char1,char2;
	student *head,*head1;
	student obj;
	while(flag)
    {
        cout<<"\nYOUR CHOICES ARE: ";
        cout<<"\n1. LINKED LIST1: \n2. LINKED LIST2: \n3. CONCATENATE LINKED LIST 1 & 2: \n4. EXIT";
        cout<<"\nEnter choice: ";
        cin>>char0;
        switch(char0)
        {
            case 1:
                while(flag1)
                {
                    cout<<"\nWhat operations on list1 would you like to perform?";
                    cout<<"\n1. Enter prn, name of members: \n2. Add new president: \n3. Add secretary: \n4. Add new members: \n5. Remove president: \n6. Remove secretary: \n7. Remove members: \n8. Total members present: \n9. Exit ";
                    cout<<"\nEnter choice: ";
                    cin>>char1;
                    switch(char1)
                    {
                        case 1:
                            head = obj.create();
                            obj.display(head);
                            break;

                        case 2:
                            head = obj.beg_add(head);
                            obj.display(head);
                            break;

                        case 3:
                            head = obj.end_add(head);
                            obj.display(head);
                            break;

                        case 4:
                            head = obj.btwn_add(head);
                            obj.display(head);
                            break;

                        case 5:
                            cout<<"\nRemoved president: ";
                            head = obj.beg_del(head);
                            obj.display(head);
                            break;

                        case 6:
                            cout<<"\nRemoved secretary: ";
                            obj.end_del(head);
                            obj.display(head);
                            break;

                        case 7:
                            head = obj.btwn_del(head);
                            cout<<"\nMember removed: ";
                            obj.display(head);
                            break;

                        case 8:
                            obj.total(head);
                            break;

                        case 9:
                            flag1 = 0;
                            break;

                        default:
                            cout<<"\nEnter valid choice!!!";
                            break;
                    }
                }
                break;

            case 2:
                while(flag2)
                {
                    cout<<"\nWhat operations on list1 would you like to perform?";
                    cout<<"\n1. Enter prn, name of members: \n2. Add new president: \n3. Add secretary: \n4. Add new members: \n5. Remove president: \n6. Remove secretary: \n7. Remove members: \n8. Total members present: \n9. Exit ";
                    cout<<"\nEnter choice: ";
                    cin>>char2;
                    switch(char2)
                    {
                        case 1:
                            head1 = obj.create();
                            obj.display(head1);
                            break;

                        case 2:
                            head1 = obj.beg_add(head1);
                            obj.display(head1);
                            break;

                        case 3:
                            head1 = obj.end_add(head1);
                            obj.display(head1);
                            break;

                        case 4:
                            head1 = obj.btwn_add(head1);
                            obj.display(head1);
                            break;

                        case 5:
                            cout<<"\nRemoved president: ";
                            head1 = obj.beg_del(head1);
                            obj.display(head1);
                            break;

                        case 6:
                            cout<<"\nRemoved secretary: ";
                            obj.end_del(head1);
                            obj.display(head1);
                            break;

                        case 7:
                            head1 = obj.btwn_del(head1);
                            cout<<"\nMember removed: ";
                            obj.display(head1);
                            break;

                        case 8:
                            obj.total(head1);
                            break;

                        case 9:
                            flag2 = 0;
                            break;

                        default:
                            cout<<"\nEnter valid choice!!!";
                            break;
                    }
                }
                break;

            case 3:
                head = obj.con(head,head1);
                obj.display(head);
                break;
            case 4:
                flag = 0;
                break;
            default:
                cout<<"\nEnter valid choice: ";
                break;
        }
    }

	return 0;
}






















  C20

#include <iostream>
#include<stdlib.h>
using namespace std;
class node
{ public:
node* next;
node* prev;
int seat;
string id;
int status;
};
class cinemax
{
public:
node* head,* tail ,* temp;
cinemax()
{
head=NULL;
}
void create_list();
void display();
void book();
void cancel();
void avail();

};
void cinemax::create_list()
{
int i=1;
temp=new node;
temp->seat=1;
temp->status=0;
temp->id="null";
tail=head=temp;
for(int i=2;i<=70;i++)
{
node *p;
p= new node;
p->seat=i;
p->status=0;
p->id="null";
tail->next=p;
p->prev=tail;
tail=p;
tail->next=head;
head->prev=tail;

}
}
void cinemax::display()
{
{ int r=1;
node* temp;
temp=head;
int count=0;
cout<<"\n------------------------------------------------------------------------------------\n";
cout<<" Screen this way \n";
cout<<"------------------------------------------------------------------------------------\n";
while(temp->next!=head)
{
if(temp->seat/10==0)
cout<<"S0"<<temp->seat<<" :";
else
cout<<"S"<<temp->seat<<" :";

if(temp->status==0)
cout<<"|___| ";
else
cout<<"|_B_| ";
count++;
if(count%7==0)
{
cout<<endl;
r++;
}
temp=temp->next;
}
cout<<"S"<<temp->seat<<" :";
if(temp->status==0)
cout<<"|___| ";
else
cout<<"|_B_| ";
}
}
void cinemax::book()
{ int x;
string y;
label:
cout<<"\n\n\nEnter seat number to be booked\n";
cin>>x;
cout<<"Enter your ID number\n";
cin>>y;
if(x<1||x>70)
{
cout<<"Enter correct seat number to book (1-70)\n";
goto label;
}
node *temp;
//temp=new node;
temp=head;
while(temp->seat!=x)
{
temp=temp->next;
}

if(temp->status==1)
cout<<"Seat already booked!\n";
else{
temp->status=1;
temp->id=y;
cout<<"Seat "<<x<<" booked!\n";
}

}
void cinemax::cancel()
{
int x;
string y;
label1:
cout<<"Enter seat number to cancel booking\n";
cin>>x;
cout<<"Enter you ID\n";
cin>>y;
if(x<1||x>70)
{
cout<<"Enter correct seat number to cancel (1-70)\n";
goto label1;
}
node *temp;
//temp=new node;
temp=head;
while(temp->seat!=x)
{
temp=temp->next;
}
if(temp->status==0)
{
cout<<"Seat not booked yet!!\n";
}
else
{
if(temp->id==y)
{
temp->status=0;
cout<<"Seat Cancelled!\n";
}

else
cout<<"Wrong User ID !!! Seat cannot be cancelled!!!\n";
}
}
void cinemax::avail()
{
int r=1;
node* temp;
temp=head;
int count=0;
cout<<"\n\n\n\n";
cout<<"\n------------------------------------------------------------------------------------\n";
cout<<" Screen this way \n";
cout<<"------------------------------------------------------------------------------------\n";
while(temp->next!=head)
{
{
if(temp->seat/10==0)
cout<<"S0"<<temp->seat<<" :";
else
cout<<"S"<<temp->seat<<" :";
if(temp->status==0)
cout<<"|___| ";
else if(temp->status==1)
cout<<" ";

count++;
if(count%7==0)

{

cout<<endl;

}

}
temp=temp->next;
}
if(temp->status==0)
{
cout<<"S"<<temp->seat<<" :";

if(temp->status==0)
cout<<"|___| ";
}

}
int main()
{ cinemax obj;
obj.create_list();
int ch;
char c='y';
while(c=='y')
{ obj.display();
cout<<"\n*********************************************\n";
cout<<" CINEMAX MOVIE THEATRE\n";
cout<<"*********************************************\n";
cout<<"\nEnter Choice\n1.Current SeatStatus\n2.Book Seat \n3.Available Seat\n4.CancelSeat\n";
cin>>ch;
switch(ch)
{
case 1:obj.display();
break;
case 2: obj.book();
break;
case 3:obj.avail();
break;
case 4: obj.cancel();
break;
default: cout<<"Wrong choice input\n";
}
cout<<"\nDo you want to perform any other operation : (y/n)\n";
cin>>c;
}
return 0;
}








D26





#include<iostream>
using namespace std;

class stack1
{
    int top;
    char stack2[100];
    char infix[100];
public:
    stack1()
    {
        top = -1;
    }
    void infix1();
    void check();
    int check1(char tkn);
    void push(int x);
    int pop();
    bool isEmpty();
    bool isFull();
    void display();
};

bool stack1::isEmpty()
{
    if(top == -1)
    {
        return true;
    }
    else
    {
        return false;
    }
}

bool stack1::isFull()
{
    if(top == 100 - 1)
    {
        return true;
    }
    else
    {
        return false;
    }
}

void stack1::push(int x)
{
    if(!isFull())
    {
        top++;
        stack2[top] = x;
    }
    else
    {
        cout<<"Stack is full!!\n";
    }
}

int stack1::pop()
{
    int x;
    if(!isEmpty())
    {
        x = stack2[top];
        top--;
        return x;
    }
    else
    {
        cout<<"Stack is empty!!\n";
    }
}

int stack1::check1(char tkn)
{
    if(isEmpty())
    {
        return 0;
    }
    if(stack2[top] == '(')
    {
        if(tkn == ')')
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
    if(stack2[top] == '{')
    {
        if(tkn == '}')
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
    if(stack2[top] == '[')
    {
        if(tkn == ']')
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
}

void stack1::check()
{
    char tkn;
    int x = 0;
    for(int i = 0; infix[i]!='\0'; i++)
    {
        tkn = infix[i];
        if(tkn == '('||tkn == ')'||tkn == '['||tkn == ']'||tkn == '{'||tkn == '}')
        {
            if(tkn == '('||tkn == '['||tkn == '{')
            {
                push(tkn);
            }
            if(tkn == '}'||tkn == ']'||tkn == ')')
            {
                x = check1(tkn);
                if(x == 1)
                {
                    pop();
                }
                else
                {
                    push(tkn);
                    break;
                }
            }
        }
    }
    if(!isEmpty())
    {
        cout<<"Equation is not paranthesized!!\n";
    }
    else
    {
        cout<<"Equation is paranthesized!!\n";
    }
}

void stack1::infix1()
{
    cout<<"\nEnter infix expression(end expression with '#'): ";
    for(int  i = 0; i < 100; i++)
    {
        cin>>infix[i];
        if(infix[i] == '#')
        {
            infix[i] = '\0';
            break;
        }
    }
}

void stack1::display()
{
    for(int  i = 0; infix[i]!= '\0'; i++)
    {
        cout<<infix[i];
    }
    cout<<"\n";
}

int main()
{
    int ch = 0;
    do
    {
        stack1 obj;
        obj.infix1();
        obj.display();
        obj.check();
        cout<<"\nDO YOU WANT TO CHECK ANOTHER EXPRESSION?\n";
        cout<<"1. YES \n2. NO \n";
        cin>>ch;
    }while(ch == 1);
    return 0;
}







 D27




#include<iostream>
#include<ctype.h>
using namespace std;

class stack
{
    int top;
    char data[20];
    public:
    stack()
    {
        top=-1;
    }

    void  conversion(char infix[20],char postfix[20])
    {
         int j=0,i;
         char e,token,x;
         for(i=0;infix[i]!='\0';i++)
         {
             token=infix[i];
             if(isalnum(token))
             {
                 postfix[j]=token;
                 j++;
             }
             else
             {
                 if(token=='(')
                     push(token);
                 else if(token==')')
                 {
                     while((x=pop())!='(')
                     {
                         postfix[j]=x;
                         j++;
                     }
                 }
                 else
                 {
                     e=topmost();
                     while(precedence(token)<=precedence(e) && !empty())
                     {
                         x=pop();
                         postfix[j]=x;
                         j++;
                     }
                     push(token);
                 }
             }
         }
         while(!empty())
         {
             x=pop();
             postfix[j]=x;
             j++;
         }
         postfix[j]='\0';
    }

    void push(int x)
    {
        top++;
        data[top]=x;
    }

    int pop()
    {
        char x;
        x=data[top];
        top--;
        return x;
    }

    char topmost()
    {
        char e;
        e=data[top];
        return e;
    }

    int precedence(char x)
    {
        if(x=='(')
            return 0;
        if(x=='+'|| x=='-')
            return 1;
        if(x=='*'|| x=='/' ||x=='%')
            return 2;
        else
            return 3;
    }

    int empty()
    {
        if(top==-1)
            return 1;
        else
            return 0;
    }
};
int main()
{
    stack s;
    char infix[20],postfix[20];
    cout<<"Enter the infix expression: ";
    cin>>infix;
    s.conversion(infix,postfix);
    cout<<"Post fix expression is:  "<<postfix;
    return 0;
}









  D29

#include <iostream>
using namespace std;

class queue {
// Class for queue.

  int data[30];
  int front,rear;
  
  public:
    queue() {
    // Constructor that initialises values for front and rear. 
    front=-1;
    rear=-1;
    }

  int emptyCheck() {
  // Check if it's empty
    if (front==-1 || front>rear) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  int fullCheck() {
  // Check if it's full
    if (rear>=30) {
      return 1;
    }
    else {
      return 0;
    }
  }

  void enqueue(int x) {
  // Add job to queue
    if (fullCheck()==1) {
      cout<<endl<<"Job queue is full."<<endl;
    }
    
    else {
      if (front==-1) {
        front++;
      }
      rear++;
      data[rear]=x;
    }
  }
  
  void dequeue() {
  // Remove job from queue.
    int x;
    if (emptyCheck()) {
      cout<<endl<<"Job queue is empty."<<endl;
    }
    else {
      x=data[front];
      front++;
      cout<<endl<<"Job ["<<x<<"] has been deleted.";
    }
  }

  void display() {
  // Displaying job queue.
    cout<<"Job queue is:\t[ ";
    for (int i=front; i<=rear; i++) {
      cout<<data[i]<<" | ";
    }
    cout<<"]"<<endl;
  }
};

int main() {
// Main function
  int choice, job, totalJobs;
  queue jobQueue;
  
//Input inital jobs
  cout<<"Enter number of jobs:\t";
  cin>>totalJobs;
  for (int i=0; i<totalJobs; i++) {
   cout<<endl<<"Enter job number "<<i+1<<":\t";
   cin>>job;
   jobQueue.enqueue(job);
  }

  while (1) {
    cout<<endl<<"----- JOB QUEUE MENU -----"<<endl;
    cout<<endl<<"1 -> Add job to queue"<<endl;
    cout<<endl<<"2 -> Delete a job from queue"<<endl;
    cout<<endl<<"3 -> Display queue"<<endl;
    cout<<endl<<"4 -> Exit"<<endl;
    cout<<endl<<endl<<"Choose an option (1-4):\t";
    cin>>choice;
    
    switch (choice) {
      case 1:
        cout<<"Add additional job:\t";
        cin>>job;
        jobQueue.enqueue(job);
        cout<<"\n==============\n";
        jobQueue.display();
        cout<<"=============\n";
        break;

      case 2:
        jobQueue.dequeue();
        cout<<"\n==============\n";
        jobQueue.display();
        cout<<"=============\n";
        break;
        
      case 3:
        cout<<"\n==============\n";
        jobQueue.display();
        cout<<"=============\n";
        break;
      
      case 4:
        cout<<"\n## DESIGNED AND ENGINEERED BY KSHITIJ\n## END OF CODE\n\n";
        exit(0);
        
      default:
        cout<<endl<<"Please choose a valid option (1-4)."<<endl;
    }
  }

  return 0;

}






















E31


#include<iostream>
using namespace std;

class deque1
{
public:
    int f,r,data[100],n;
    deque1()
    {
        f =  r = -1;
        cout<<"Enter number of elements: ";
        cin>>n;
    }
    void enqueuef();
    void enqueuer();
    void dequeuef();
    void dequeuer();
    bool isEmpty();
    bool isFull();
    void display();
};

void deque1::enqueuef()
{
    int id;
    cout<<"\nEnter element: ";
    cin>>id;
    if(!isFull())
    {
        if(f == -1)
            f = r = 0;
        else if(f == 0)
            f = n - 1;
        else
            f--;
        data[f] = id;
    }
    else
        cout<<"\nQueue is full....\n";
}

void deque1::enqueuer()
{
    int id;
    cout<<"\nEnter element: ";
    cin>>id;
    if(!isFull())
    {
        if(f == -1)
            f = r = 0;
        else if(r == n - 1)
            r = 0;
        else
            r++;
        data[r] = id;
    }
    else
        cout<<"\nQueue is full....\n";
}

void deque1::dequeuef()
{
    if(!isEmpty())
    {
        if(f == r)
            f = r = -1;
        else if(f == n-1)
            f = 0;
        else
            f++;
    }
    else
        cout<<"\nQueue is empty....\n";
}

void deque1::dequeuer()
{
    if(!isEmpty())
    {
        if(f == r)
            f = r = -1;
        else if(r == 0)
            r = n-1;
        else
            r--;
    }
    else
        cout<<"\nQueue is empty....\n";
}

void deque1::display()
{
    int i;
    cout<<"\nDeque: ";
    if(!isEmpty())
    {
        i = f;
        do
        {
            cout<<data[i]<<" ";
            i = (i+1)%n;
        }while(i != (r+1)%n);
    }
    else
        cout<<"\nQueue is empty....\n";
    cout<<"\n";
}

bool deque1::isFull()
{
    if((f==0 && r >= n - 1)|| f==r+1)
        return true;
    else
        return false;
}

bool deque1::isEmpty()
{
    if(r == -1)
        return true;
    else
        return false;
}

int main()
{
    deque1 obj;
    int ch;
    bool flag = true;
    while(flag)
    {
        cout<<"\n****YOUR CHOICES ARE****\n";
        cout<<"\n1. Enqueue(at front) \n2. Enqueue(at rear) \n3. Dequeue(at front) \n4. Dequeue(at rear) \n5. Display queue \n6. Exit";
        cout<<"\nEnter your choice: ";
        cin>>ch;
        switch(ch)
        {
        case 1:
            obj.enqueuef();
            obj.display();
            break;

        case 2:
            obj.enqueuer();
            obj.display();
            break;

        case 3:
            obj.dequeuef();
            obj.display();
            break;

        case 4:
            obj.dequeuer();
            obj.display();
            break;

        case 5:
            obj.display();
            break;

        case 6:
            flag = false;
            break;

        default:
            cout<<"\nEnter valid choice!!!\n";
            break;
        }
    }
    return 0;
}








E32





#include <iostream>
using namespace std;

#define size 5

class pizza
{
    int porder[size];
    int front, rear;

public:
    pizza()
    {
        front = rear = -1;
    }
    int qfull()
    {
        if (front == (rear + 1) % size)
            return 1;
        else
            return 0;
    }
    int qempty()
    {
        if (front == -1)
            return 1;
        else
            return 0;
    }
    void accept_order(int item)
    {
        if (qfull())
            cout << "\nVery Sorry !!!! No more orders....\n";
        else
        {
            if (front == -1)
            {
                front = rear = 0;
            }
            else
            {
                rear = (rear + 1) % size;
            }
            porder[rear] = item;
        }
    }
    void make_payment(int n)
    {
        int item;
        char ans;
        if (qempty())
            cout << "\nSorry !!! order is not there...\n";
        else
        {
            cout << "\nDeliverd orders as follows...\n";
            for (int i = 0; i < n; i++)
            {
                item = porder[front];
                if (front == rear)
                {
                    front = rear = -1;
                }
                else
                {
                    front = (front + 1) % size;
                }
                cout << "\t" << item;
            }
            cout << "\nTotal amount to pay : " << n * 100;
            cout << "\nThank you visit Again....\n";
        }
    }
    void order_in_queue()
    {
        int temp;
        if (qempty())
        {
            cout << "\nSorry !! There is no pending order...\n";
        }
        else
        {
            temp = front;
            cout << "\nPending Order as follows..\n";
            while (temp != rear)
            {
                cout << "\t" << porder[temp];
                temp = (temp + 1) % size;
            }
            cout << "\t" << porder[temp];
        }
    }
};

int main()
{
    pizza p1;
    int ch, k, n;
    do
    {
        cout << "\n\t***** Welcome To Pizza Parlor *******\n";
        cout << "\n1.Accept order\n2.Make_payment\n3.Pending Orders\nEnter u r choice:";
        cin >> ch;
        switch (ch)
        {
        case 1:
            cout << "\nWhich Pizza would do u like to have today\n";
            cout << "\n1.Veg Soya Pizza\n2.Veg butter Pizza\n3.Egg_Pizza";
            cout << "\nPlease enter your order: ";
            cin >> k;
            p1.accept_order(k);
            break;
        case 2:
            cout << "\nHow many Pizza ?";
            cin >> n;
            p1.make_payment(n);
            break;
        case 3:
            cout << "\n Following orders are in queue to deliver....as follows..\n";
            p1.order_in_queue();
            break;
        }
    } while (ch != 4);

    return 0;
}















mini project 




global f
f = 0
 
#this t_movie function is used to select movie name 
def t_movie():
    global f
    f = f+1
    print("which movie do you want to watch?")
    print("1,movie 1 ")
    print("2,movie 2 ")
    print("3,movie 3")
    print("4,back")
    movie = int(input("choose your movie: "))
    if movie == 4:
      # in this it goes to center function and from center it goes to movie function and it comes back here and then go to theater 
      center()
      theater()
      return 0
    if f == 1:
      theater()
 
# this theater function used to select screen 
def theater():
    print("which screen do you want to watch movie: ")
    print("1,SCREEN 1")
    print("2,SCREEN 2")
    print("3,SCREEN 3")
    a = int(input("choose your screen: "))
    ticket = int(input("number of ticket do you want?: "))
    timing(a)
 
# this timing function used to select timing for movie 
def timing(a):
    time1 = {
        "1": "10.00-1.00",
        "2": "1.10-4.10",
        "3": "4.20-7.20",
        "4": "7.30-10.30"
    }
    time2 = {
        "1": "10.15-1.15",
        "2": "1.25-4.25",
        "3": "4.35-7.35",
        "4": "7.45-10.45"
    }
    time3 = {
        "1": "10.30-1.30",
        "2": "1.40-4.40",
        "3": "4.50-7.50",
        "4": "8.00-10.45"
    }
    if a == 1:
        print("choose your time:")
        print(time1)
        t = input("select your time:")
        x = time1[t]
        print("successful!, enjoy movie at "+x)
    elif a == 2:
        print("choose your time:")
        print(time2)
        t = input("select your time:")
        x = time2[t]
        print("successful!, enjoy movie at "+x)
    elif a == 3:
        print("choose your time:")
        print(time3)
        t = input("select your time:")
        x = time3[t]
        print("successful!, enjoy movie at "+x)
    return 0
 
 
def movie(theater):
    if theater == 1:
        t_movie()
    elif theater == 2:
        t_movie()
    elif theater == 3:
        t_movie()
    elif theater == 4:
        city()
    else:
        print("wrong choice")
 
 
def center():
    print("which theater do you wish to see movie? ")
    print("1,Inox")
    print("2,Icon")
    print("3,pvp")
    print("4,back")
    a = int(input("choose your option: "))
    movie(a)
    return 0
 
# this function is used to select city 
def city():
    print("Hi welcome to movie ticket booking: ")
    print("where you want to watch movie?:")
    print("1,city 1")
    print("2,city 2 ")
    print("3,city 3 ")
    place = int(input("choose your option: "))
    if place == 1:
      center()
    elif place == 2:
      center()
    elif place == 3:
      center()
    else:
      print("wrong choice")
 
 
city() # it calls the function city























































